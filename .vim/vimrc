call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'kana/vim-smartinput'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-indent'
Plug 'bps/vim-textobj-python'
Plug 'kana/vim-operator-user'
Plug 'kana/vim-operator-replace'
Plug 'thinca/vim-quickrun'
Plug 'altercation/vim-colors-solarized'
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline', { 'tag': 'v0.10' }
Plug 'vim-airline/vim-airline-themes'
Plug 'editorconfig/editorconfig-vim'
Plug 'Yggdroot/indentLine'
Plug 'SirVer/ultisnips', { 'tag': '3.1' }
Plug 'honza/vim-snippets'
Plug 'w0rp/ale', { 'tag': 'v2.6.0' }
Plug 'Shougo/deoplete.nvim', { 'tag': '5.1' }
Plug 'zchee/deoplete-jedi'
Plug 'deoplete-plugins/deoplete-go'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'tpope/vim-fugitive', { 'tag': 'v2.5' }
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'davidhalter/jedi-vim', { 'tag': '0.9.0' }
Plug 'cespare/vim-toml'
Plug 'fatih/vim-go', { 'tag': 'v1.22', 'do': ':GoUpdateBinaries' }
Plug 'python/black'
call plug#end()

let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]

" ale
let g:ale_fixers = { 'python': ['isort', 'black'] }

" deoplete
let g:deoplete#enable_at_startup = 1
let g:auto_complete_delay = 0
inoremap <expr><CR> pumvisible() ? deoplete#close_popup() : "<CR>"

set completeopt=noinsert
set completeopt+=menuone

" filetype plugin indent on

" jedi-vim
let g:jedi#auto_vim_configuration = 0
let g:jedi#completions_enabled = 0
let g:jedi#popup_on_dot = 1
let g:jedi#show_call_signatures = 2

" quickrun
let g:quickrun_no_default_key_mappings = 1

" airline
" let g:airline_powerline_fonts = 1
" set ambiwidth=double
let g:airline_left_sep = ''
let g:airline_right_sep = ''

" vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_term_mode = 'split'

" Go
autocmd FileType go :highlight goErr cterm=bold ctermfg=214
autocmd FileType go :match goErr /\<err\>/


set number
set relativenumber

set t_vb=
set novisualbell

set nowritebackup
set nobackup
set noswapfile

set ignorecase
set smartcase

set hlsearch
"set autochdir

set clipboard+=unnamed

set ttimeoutlen=10

set showcmd

set showmatch

set expandtab
set tabstop=4
set shiftwidth=4

set hidden
set smartindent

"Visualize empty chars
set list

syntax enable
set background=dark
colorscheme solarized
let g:solarized_visibility = "low"

let mapleader = "\<Space>"

nnoremap <Leader>h :History<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>X :ALEFix<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>p "*p<CR>
nnoremap <Leader>P "*P<CR>
nnoremap <Leader>B :Black<CR>
nnoremap <Leader>R :QuickRun<CR>

imap <silent> jj <ESC>

vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]
" nnoremap <C-h> <C-w>h
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-l> <C-w>l

" cd %:h when opening a file
function! s:ChangeCurrentDirectory()
  let l:dir = expand("%:p:h")
  if isdirectory(fnamemodify(l:dir, ":p"))
    execute printf('lcd `=%s`', string(fnamemodify(l:dir, ":p")))
  endif
endfunction
autocmd BufEnter * call s:ChangeCurrentDirectory()
