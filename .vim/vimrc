if has('vim_starting')
  if !exists($XDG_DATA_HOME)
    let $XDG_DATA_HOME = $HOME . '/.local/share'
  endif

  if !isdirectory($XDG_DATA_HOME . '/vim')
    call mkdir($XDG_DATA_HOME . '/vim', "p")
  endif
endif

call plug#begin($XDG_DATA_HOME . '/vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'kana/vim-smartinput'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-line'
Plug 'bps/vim-textobj-python'
Plug 'kana/vim-operator-user'
Plug 'kana/vim-operator-replace'
Plug 'thinca/vim-quickrun'
Plug 'altercation/vim-colors-solarized'
Plug '~/local/fzf'
Plug 'junegunn/fzf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'Yggdroot/indentLine'
Plug 'SirVer/ultisnips', { 'tag': '3.2' }
Plug 'honza/vim-snippets'
Plug 'tpope/vim-fugitive', { 'tag': 'v2.5' }
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'cespare/vim-toml'
Plug 'w0rp/ale', { 'tag': 'v2.7.0' }
Plug 'davidhalter/jedi-vim', { 'tag': '0.10.0' }
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp', { 'tag': 'v0.1.1' }
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'wellle/tmux-complete.vim'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'mattn/vim-goimports'
call plug#end()

function! s:SetViminfo() abort
  if !exists($XDG_CACHE_HOME)
    let $XDG_CACHE_HOME = $HOME . '/.cache'
  endif

  if !isdirectory($XDG_CACHE_HOME . '/vim')
    call mkdir($XDG_CACHE_HOME . '/vim', "p")
  endif

  set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
endfunction

if has('vim_starting')
  call s:SetViminfo()
endif

filetype plugin indent on

" Vista
let g:vista_default_executive = 'ctags'

" lsp
" Disable code linting by lsp, use ALE instead.
let g:lsp_diagnostics_enabled = 0
" Disable auto hover for function signature
let g:lsp_signature_help_enabled = 0
set omnifunc=lsp#complete

" ALE
let g:ale_completion_enabled = 0

" UltiSnips
let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]
let g:UltiSnipsExpandTrigger="<c-e>"
call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
    \ 'name': 'ultisnips',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
    \ }))

call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'allowlist': ['*'],
    \ 'blocklist': ['go'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ 'config': {
    \    'max_buffer_size': 5000000,
    \  },
    \ }))

" quickrun
let g:quickrun_no_default_key_mappings = 1

" airline
" let g:airline_powerline_fonts = 1
" set ambiwidth=double
let g:airline_left_sep = ''
let g:airline_right_sep = ''

set number
set relativenumber

set t_vb=
set novisualbell

set nowritebackup
set nobackup
set noswapfile

set ignorecase
set smartcase

set hlsearch
"set autochdir

set clipboard+=unnamed

set ttimeoutlen=10

set showcmd

set showmatch

set expandtab
set tabstop=4
set shiftwidth=4

set hidden
set smartindent

"Visualize empty chars
set list

syntax enable
set background=dark
colorscheme solarized
let g:solarized_visibility = "low"

let mapleader = "\<Space>"

nnoremap <Leader>h :History<CR>
" nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>b :FZFBufferAndCachedFiles<CR>
nnoremap <Leader>t :Tags<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>p "*p<CR>
nnoremap <Leader>P "*P<CR>
nnoremap <Leader>R :QuickRun<CR>

imap <silent> jj <ESC>

vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" nnoremap <C-]> :<C-u>LspDefinition<CR>
nnoremap <Leader>d :<C-u>LspDefinition<CR>
nnoremap K :<C-u>LspHover<CR>
" nnoremap <LocalLeader>R :<C-u>LspRename<CR>
" nnoremap <LocalLeader>n :<C-u>LspReferences<CR>
" nnoremap <LocalLeader>f :<C-u>LspDocumentDiagnostics<CR>
" nnoremap <LocalLeader>s :<C-u>LspDocumentFormat<CR>
nnoremap <Leader>r :<C-u>LspRename<CR>
nnoremap <Leader>n :<C-u>LspReferences<CR>
nnoremap <Leader>f :<C-u>LspDocumentDiagnostics<CR>
nnoremap <Leader>F :<C-u>LspDocumentFormat<CR>

" cd %:h when opening a file
function! s:ChangeCurrentDirectory()
  let l:dir = expand("%:p:h")
  if isdirectory(fnamemodify(l:dir, ":p"))
    execute printf('lcd `=%s`', string(fnamemodify(l:dir, ":p")))
  endif
endfunction
autocmd BufEnter * call s:ChangeCurrentDirectory()

function! s:SourceMyCompSource()
  let l:svsource = expand('~/.vim/mycompsource/svsource.vim')

  if filereadable(svsource)
    execute 'source' svsource
  endif
endfunction
call s:SourceMyCompSource()

command! FZFBufferAndCachedFiles call fzf#run({
\ 'source':  reverse(s:buffer_and_cached_files()),
\ 'sink':    'edit',
\ 'options': '-m -x +s',
\ 'down':    '40%' })

function! s:buffer_and_cached_files()
  let l:buffers = map(
  \ filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)')

  if !executable('cachef')
      return l:buffers
  endif

  return extend(
  \ split(system('cat $(cachef --cache-file)')), buffers)
endfunction
